// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protobuf/pb_message.proto

#ifndef PROTOBUF_protobuf_2fpb_5fmessage_2eproto__INCLUDED
#define PROTOBUF_protobuf_2fpb_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace message {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_protobuf_2fpb_5fmessage_2eproto();
void protobuf_AssignDesc_protobuf_2fpb_5fmessage_2eproto();
void protobuf_ShutdownFile_protobuf_2fpb_5fmessage_2eproto();

class PBAPNSUserInfo;
class PBAPNSBody;
class PBAPNSMessage;

// ===================================================================

class PBAPNSUserInfo : public ::google::protobuf::Message {
 public:
  PBAPNSUserInfo();
  virtual ~PBAPNSUserInfo();

  PBAPNSUserInfo(const PBAPNSUserInfo& from);

  inline PBAPNSUserInfo& operator=(const PBAPNSUserInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSUserInfo& default_instance();

  void Swap(PBAPNSUserInfo* other);

  // implements Message ----------------------------------------------

  PBAPNSUserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSUserInfo& from);
  void MergeFrom(const PBAPNSUserInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:message.PBAPNSUserInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fpb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fpb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fpb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSUserInfo* default_instance_;
};
// -------------------------------------------------------------------

class PBAPNSBody : public ::google::protobuf::Message {
 public:
  PBAPNSBody();
  virtual ~PBAPNSBody();

  PBAPNSBody(const PBAPNSBody& from);

  inline PBAPNSBody& operator=(const PBAPNSBody& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSBody& default_instance();

  void Swap(PBAPNSBody* other);

  // implements Message ----------------------------------------------

  PBAPNSBody* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSBody& from);
  void MergeFrom(const PBAPNSBody& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alert = 1;
  inline bool has_alert() const;
  inline void clear_alert();
  static const int kAlertFieldNumber = 1;
  inline const ::std::string& alert() const;
  inline void set_alert(const ::std::string& value);
  inline void set_alert(const char* value);
  inline void set_alert(const char* value, size_t size);
  inline ::std::string* mutable_alert();
  inline ::std::string* release_alert();
  inline void set_allocated_alert(::std::string* alert);

  // optional string sound = 2;
  inline bool has_sound() const;
  inline void clear_sound();
  static const int kSoundFieldNumber = 2;
  inline const ::std::string& sound() const;
  inline void set_sound(const ::std::string& value);
  inline void set_sound(const char* value);
  inline void set_sound(const char* value, size_t size);
  inline ::std::string* mutable_sound();
  inline ::std::string* release_sound();
  inline void set_allocated_sound(::std::string* sound);

  // optional int32 badge = 3;
  inline bool has_badge() const;
  inline void clear_badge();
  static const int kBadgeFieldNumber = 3;
  inline ::google::protobuf::int32 badge() const;
  inline void set_badge(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:message.PBAPNSBody)
 private:
  inline void set_has_alert();
  inline void clear_has_alert();
  inline void set_has_sound();
  inline void clear_has_sound();
  inline void set_has_badge();
  inline void clear_has_badge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* alert_;
  ::std::string* sound_;
  ::google::protobuf::int32 badge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fpb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fpb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fpb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSBody* default_instance_;
};
// -------------------------------------------------------------------

class PBAPNSMessage : public ::google::protobuf::Message {
 public:
  PBAPNSMessage();
  virtual ~PBAPNSMessage();

  PBAPNSMessage(const PBAPNSMessage& from);

  inline PBAPNSMessage& operator=(const PBAPNSMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PBAPNSMessage& default_instance();

  void Swap(PBAPNSMessage* other);

  // implements Message ----------------------------------------------

  PBAPNSMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PBAPNSMessage& from);
  void MergeFrom(const PBAPNSMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .message.PBAPNSBody aps = 1;
  inline bool has_aps() const;
  inline void clear_aps();
  static const int kApsFieldNumber = 1;
  inline const ::message::PBAPNSBody& aps() const;
  inline ::message::PBAPNSBody* mutable_aps();
  inline ::message::PBAPNSBody* release_aps();
  inline void set_allocated_aps(::message::PBAPNSBody* aps);

  // repeated .message.PBAPNSUserInfo userInfo = 2;
  inline int userinfo_size() const;
  inline void clear_userinfo();
  static const int kUserInfoFieldNumber = 2;
  inline const ::message::PBAPNSUserInfo& userinfo(int index) const;
  inline ::message::PBAPNSUserInfo* mutable_userinfo(int index);
  inline ::message::PBAPNSUserInfo* add_userinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >&
      userinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >*
      mutable_userinfo();

  // @@protoc_insertion_point(class_scope:message.PBAPNSMessage)
 private:
  inline void set_has_aps();
  inline void clear_has_aps();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::message::PBAPNSBody* aps_;
  ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo > userinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_protobuf_2fpb_5fmessage_2eproto();
  friend void protobuf_AssignDesc_protobuf_2fpb_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_protobuf_2fpb_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static PBAPNSMessage* default_instance_;
};
// ===================================================================


// ===================================================================

// PBAPNSUserInfo

// required string key = 1;
inline bool PBAPNSUserInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSUserInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSUserInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSUserInfo::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& PBAPNSUserInfo::key() const {
  return *key_;
}
inline void PBAPNSUserInfo::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PBAPNSUserInfo::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void PBAPNSUserInfo::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAPNSUserInfo::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* PBAPNSUserInfo::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBAPNSUserInfo::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string value = 2;
inline bool PBAPNSUserInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAPNSUserInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAPNSUserInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAPNSUserInfo::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& PBAPNSUserInfo::value() const {
  return *value_;
}
inline void PBAPNSUserInfo::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PBAPNSUserInfo::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void PBAPNSUserInfo::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAPNSUserInfo::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* PBAPNSUserInfo::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBAPNSUserInfo::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// PBAPNSBody

// optional string alert = 1;
inline bool PBAPNSBody::has_alert() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSBody::set_has_alert() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSBody::clear_has_alert() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSBody::clear_alert() {
  if (alert_ != &::google::protobuf::internal::kEmptyString) {
    alert_->clear();
  }
  clear_has_alert();
}
inline const ::std::string& PBAPNSBody::alert() const {
  return *alert_;
}
inline void PBAPNSBody::set_alert(const ::std::string& value) {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::kEmptyString) {
    alert_ = new ::std::string;
  }
  alert_->assign(value);
}
inline void PBAPNSBody::set_alert(const char* value) {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::kEmptyString) {
    alert_ = new ::std::string;
  }
  alert_->assign(value);
}
inline void PBAPNSBody::set_alert(const char* value, size_t size) {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::kEmptyString) {
    alert_ = new ::std::string;
  }
  alert_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAPNSBody::mutable_alert() {
  set_has_alert();
  if (alert_ == &::google::protobuf::internal::kEmptyString) {
    alert_ = new ::std::string;
  }
  return alert_;
}
inline ::std::string* PBAPNSBody::release_alert() {
  clear_has_alert();
  if (alert_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = alert_;
    alert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBAPNSBody::set_allocated_alert(::std::string* alert) {
  if (alert_ != &::google::protobuf::internal::kEmptyString) {
    delete alert_;
  }
  if (alert) {
    set_has_alert();
    alert_ = alert;
  } else {
    clear_has_alert();
    alert_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string sound = 2;
inline bool PBAPNSBody::has_sound() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PBAPNSBody::set_has_sound() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PBAPNSBody::clear_has_sound() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PBAPNSBody::clear_sound() {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    sound_->clear();
  }
  clear_has_sound();
}
inline const ::std::string& PBAPNSBody::sound() const {
  return *sound_;
}
inline void PBAPNSBody::set_sound(const ::std::string& value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
}
inline void PBAPNSBody::set_sound(const char* value) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(value);
}
inline void PBAPNSBody::set_sound(const char* value, size_t size) {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  sound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PBAPNSBody::mutable_sound() {
  set_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    sound_ = new ::std::string;
  }
  return sound_;
}
inline ::std::string* PBAPNSBody::release_sound() {
  clear_has_sound();
  if (sound_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sound_;
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PBAPNSBody::set_allocated_sound(::std::string* sound) {
  if (sound_ != &::google::protobuf::internal::kEmptyString) {
    delete sound_;
  }
  if (sound) {
    set_has_sound();
    sound_ = sound;
  } else {
    clear_has_sound();
    sound_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 badge = 3;
inline bool PBAPNSBody::has_badge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PBAPNSBody::set_has_badge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PBAPNSBody::clear_has_badge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PBAPNSBody::clear_badge() {
  badge_ = 0;
  clear_has_badge();
}
inline ::google::protobuf::int32 PBAPNSBody::badge() const {
  return badge_;
}
inline void PBAPNSBody::set_badge(::google::protobuf::int32 value) {
  set_has_badge();
  badge_ = value;
}

// -------------------------------------------------------------------

// PBAPNSMessage

// required .message.PBAPNSBody aps = 1;
inline bool PBAPNSMessage::has_aps() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PBAPNSMessage::set_has_aps() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PBAPNSMessage::clear_has_aps() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PBAPNSMessage::clear_aps() {
  if (aps_ != NULL) aps_->::message::PBAPNSBody::Clear();
  clear_has_aps();
}
inline const ::message::PBAPNSBody& PBAPNSMessage::aps() const {
  return aps_ != NULL ? *aps_ : *default_instance_->aps_;
}
inline ::message::PBAPNSBody* PBAPNSMessage::mutable_aps() {
  set_has_aps();
  if (aps_ == NULL) aps_ = new ::message::PBAPNSBody;
  return aps_;
}
inline ::message::PBAPNSBody* PBAPNSMessage::release_aps() {
  clear_has_aps();
  ::message::PBAPNSBody* temp = aps_;
  aps_ = NULL;
  return temp;
}
inline void PBAPNSMessage::set_allocated_aps(::message::PBAPNSBody* aps) {
  delete aps_;
  aps_ = aps;
  if (aps) {
    set_has_aps();
  } else {
    clear_has_aps();
  }
}

// repeated .message.PBAPNSUserInfo userInfo = 2;
inline int PBAPNSMessage::userinfo_size() const {
  return userinfo_.size();
}
inline void PBAPNSMessage::clear_userinfo() {
  userinfo_.Clear();
}
inline const ::message::PBAPNSUserInfo& PBAPNSMessage::userinfo(int index) const {
  return userinfo_.Get(index);
}
inline ::message::PBAPNSUserInfo* PBAPNSMessage::mutable_userinfo(int index) {
  return userinfo_.Mutable(index);
}
inline ::message::PBAPNSUserInfo* PBAPNSMessage::add_userinfo() {
  return userinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >&
PBAPNSMessage::userinfo() const {
  return userinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::message::PBAPNSUserInfo >*
PBAPNSMessage::mutable_userinfo() {
  return &userinfo_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace message

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protobuf_2fpb_5fmessage_2eproto__INCLUDED
